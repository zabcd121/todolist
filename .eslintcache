[{"D:\\fastcampus공부\\todolist\\src\\reportWebVitals.js":"1","D:\\fastcampus공부\\todolist\\src\\App.js":"2","D:\\fastcampus공부\\todolist\\src\\components\\TodoTemplate.js":"3","D:\\fastcampus공부\\todolist\\src\\components\\TodoHead.js":"4","D:\\fastcampus공부\\todolist\\src\\components\\TodoList.js":"5","D:\\fastcampus공부\\todolist\\src\\components\\TodoItem.js":"6","D:\\fastcampus공부\\todolist\\src\\components\\TodoCreate.js":"7","D:\\fastcampus공부\\todolist\\src\\TodoContext.js":"8"},{"size":362,"mtime":1606355496246,"results":"9","hashOfConfig":"10"},{"size":627,"mtime":1606810212189,"results":"11","hashOfConfig":"10"},{"size":589,"mtime":1606797731718,"results":"12","hashOfConfig":"10"},{"size":834,"mtime":1606798344490,"results":"13","hashOfConfig":"10"},{"size":961,"mtime":1606810284889,"results":"14","hashOfConfig":"10"},{"size":1782,"mtime":1606804748516,"results":"15","hashOfConfig":"10"},{"size":2334,"mtime":1606809676041,"results":"16","hashOfConfig":"10"},{"size":2838,"mtime":1606810094557,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"izf6tz",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"D:\\fastcampus공부\\todolist\\src\\reportWebVitals.js",[],"D:\\fastcampus공부\\todolist\\src\\App.js",[],"D:\\fastcampus공부\\todolist\\src\\components\\TodoTemplate.js",[],"D:\\fastcampus공부\\todolist\\src\\components\\TodoHead.js",[],"D:\\fastcampus공부\\todolist\\src\\components\\TodoList.js",[],"D:\\fastcampus공부\\todolist\\src\\components\\TodoItem.js",[],"D:\\fastcampus공부\\todolist\\src\\components\\TodoCreate.js",["35"],"D:\\fastcampus공부\\todolist\\src\\TodoContext.js",["36","37"],"import React, {createContext, useReducer, useContext, useRef} from 'react';\r\n\r\nconst initialTodos = [\r\n  {\r\n    id:1,\r\n    text: '프로젝트 생성하기',\r\n    done: true,\r\n  },\r\n  {\r\n    id:2,\r\n    text: '컴포넌트 스타일링하기',\r\n    done: true,\r\n  },\r\n  {\r\n    id:3,\r\n    text: 'Context 만들기',\r\n    done: false,\r\n  },\r\n  {\r\n    id:4,\r\n    text: '기능 구현하기',\r\n    done: false,\r\n  }\r\n];\r\n\r\n/*\r\nCREATE TOGGLE REMOVE \r\n*/\r\nfunction todoReducer(state, action){\r\n /*추후에 useReducer에서 사용할 함수임. state와 action을 가져와서 그 다음상태를  리턴함*/\r\n  switch(action.type){\r\n    case 'CREATE':\r\n      return state.concat(action.todo);\r\n    case 'TOGGLE':\r\n      return state.map(\r\n        todo => todo.id === action.id ? {...todo, done: !todo.done} : todo\r\n      );\r\n    case 'REMOVE':\r\n      return state.filter(todo => todo.id !== action.id);\r\n    default:\r\n      throw new Error('Unhandled action type: ${action.type}')\r\n  }\r\n  return <div></div>;\r\n}\r\n\r\n/*state와 dispatch를 위한 컨텍스트를 두개 만들어줌 */\r\nconst TodoStateContext = createContext();\r\nconst TodoDispatchContext = createContext();\r\nconst TodoNextIdContext = createContext();\r\n/* TodoNextIdContext는 상태로 관리하는게 아닌 바로 변화를 시킬수있는 값을 관리하기위해 useRef를 사용 */\r\n\r\n/*app컴포넌트를 컨텍스트로 감싸야됨 */\r\n/* 컴포넌트임 */\r\nexport function TodoProvider({children}) {\r\n  const [state, dispatch] = useReducer(todoReducer, initialTodos); /*reducer함수와 초기상태 */\r\n  // dispatch는 reducer함수를 실행시키는데 여기서 파라미터로 action객체를 넘겨줌\r\n  const nextId = useRef(5);\r\n\r\n  return (\r\n    <TodoStateContext.Provider value={state}>\r\n      {/* 위에서 createContext로 만든 컨텍스트에 값을 제공하기위해 Provider를 사용 */}\r\n      <TodoDispatchContext.Provider value={dispatch}>\r\n        <TodoNextIdContext.Provider value={nextId}>\r\n          {children}\r\n        </TodoNextIdContext.Provider>\r\n      </TodoDispatchContext.Provider>\r\n    </TodoStateContext.Provider>\r\n  );\r\n\r\n}\r\n\r\n// const state = useContext(TodoStateContext)\r\n//를 TodoList에서 TodoStateContext안에 있는 컨텐스트를 쓰고 싶을 때 \r\n//쓸 수 있지만 custom hook을 만들어 편리하게 사용\r\n\r\n//커스텀 훅\r\nexport function useTodoState(){\r\n  const context = useContext(TodoStateContext);\r\n  if(!context){\r\n    throw new Error('Cannot find TodoProvider');\r\n  }\r\n}\r\n \r\nexport function useTodoDispatch(){\r\n  const context = useContext(TodoDispatchContext);\r\n  if(!context){\r\n    throw new Error('Cannot find TodoProvider');\r\n  }\r\n}\r\n\r\nexport function useTodoNextId(){\r\n  const context = useContext(TodoNextIdContext);\r\n  if(!context){\r\n    throw new Error('Cannot find TodoProvider');\r\n  }\r\n}",{"ruleId":"38","severity":1,"message":"39","line":4,"column":10,"nodeType":"40","messageId":"41","endLine":4,"endColumn":23},{"ruleId":"42","severity":1,"message":"43","line":41,"column":23,"nodeType":"44","messageId":"45","endLine":41,"endColumn":62},{"ruleId":"46","severity":1,"message":"47","line":43,"column":3,"nodeType":"48","messageId":"49","endLine":43,"endColumn":22},"no-unused-vars","'useTodoNextId' is defined but never used.","Identifier","unusedVar","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode"]